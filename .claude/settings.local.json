{
  "permissions": {
    "allow": [
      "Bash(npm run dev:*)",
      "Bash(grep:*)",
      "Bash(npm run build:*)",
      "Bash(git checkout:*)",
      "Bash(npx supabase functions logs:*)",
      "Bash(npx supabase functions:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "Bash(del \"C:\\Users\\davor\\Documents\\Projects\\Intentos-del-proyecto\\qr-order-system-frontend-gemini\\temp_db_query.js\")",
      "Bash(supabase status:*)",
      "Bash(npx supabase:*)",
      "Bash(pkill:*)",
      "Bash(curl:*)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://osvgapxefsqqhltkabku.supabase.co SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9zdmdhcHhlZnNxcWhsdGthYmt1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDgwMzEyNSwiZXhwIjoyMDY2Mzc5MTI1fQ.zKLPq_6X9gk1kA9W0l88XduIYtdx-OfqdR9O7uXPmyc node create-test-user.js)",
      "Bash(fuser:*)",
      "Bash(npx kill-port:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(mv:*)",
      "Bash(del check_schema.js fix_schema.js)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://osvgapxefsqqhltkabku.supabase.co SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9zdmdhcHhlZnNxcWhsdGthYmt1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDgwMzEyNSwiZXhwIjoyMDY2Mzc5MTI1fQ.zKLPq_6X9gk1kA9W0l88XduIYtdx-OfqdR9O7uXPmyc node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(''https://osvgapxefsqqhltkabku.supabase.co'', ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9zdmdhcHhlZnNxcWhsdGthYmt1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDgwMzEyNSwiZXhwIjoyMDY2Mzc5MTI1fQ.zKLPq_6X9gk1kA9W0l88XduIYtdx-OfqdR9O7uXPmyc'');\n\n// Test modifier creation to see exact error\nasync function testModifier() {\n  // Get a valid menu item first\n  const { data: items } = await supabase\n    .from(''menu_items'')\n    .select(''id, restaurant_id'')\n    .not(''restaurant_id'', ''is'', null)\n    .limit(1);\n  \n  if (!items || items.length === 0) {\n    console.log(''No valid menu items found'');\n    return;\n  }\n  \n  const testItem = items[0];\n  console.log(''Testing with item:'', testItem);\n  \n  // Try to create a modifier group\n  const { data, error } = await supabase\n    .from(''modifier_groups'')\n    .insert({\n      menu_item_id: testItem.id,\n      restaurant_id: testItem.restaurant_id,\n      name: ''TEST_DEBUG_GROUP'',\n      is_required: false,\n      min_selections: 0,\n      max_selections: 1,\n      display_order: 999\n    })\n    .select();\n  \n  if (error) {\n    console.error(''Modifier creation error:'', error);\n  } else {\n    console.log(''âœ… Modifier created successfully:'', data);\n    \n    // Clean up\n    if (data && data[0]) {\n      await supabase\n        .from(''modifier_groups'')\n        .delete()\n        .eq(''id'', data[0].id);\n      console.log(''ðŸ§¹ Test modifier cleaned up'');\n    }\n  }\n}\n\ntestModifier();\")",
      "mcp__ide__getDiagnostics",
      "mcp__supabase__apply_migration",
      "mcp__supabase__execute_sql",
      "Bash(del test-rpc-function.js apply-dashboard-function.js)",
      "mcp__supabase__list_tables",
      "mcp__supabase__list_migrations",
      "Read(/C:\\Users\\davor\\Pictures\\Screenshots/**)",
      "Read(/C:\\Users\\davor\\Pictures\\Screenshots/**)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "supabase"
  ]
}