const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function diagnosticQRStatus() {
  console.log('üîç DIAGN√ìSTICO DEL ESTADO ACTUAL DE C√ìDIGOS QR');
  console.log('================================================\n');

  // Verificar variables de entorno
  console.log('1. VERIFICANDO CONFIGURACI√ìN DE SUPABASE:');
  console.log('   NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Configurado' : '‚ùå No configurado');
  console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Configurado' : '‚ùå No configurado');
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.log('\n‚ùå ERROR: Variables de entorno de Supabase no configuradas');
    console.log('   Por favor, verifica tu archivo .env.local');
    return;
  }

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  try {
    // 2. Verificar restaurantes
    console.log('\n2. VERIFICANDO RESTAURANTES:');
    const { data: restaurants, error: restaurantsError } = await supabase
      .from('restaurants')
      .select('id, name, created_at');

    if (restaurantsError) {
      console.log('   ‚ùå Error al obtener restaurantes:', restaurantsError.message);
    } else {
      console.log(`   ‚úÖ Restaurantes encontrados: ${restaurants.length}`);
      restaurants.forEach(restaurant => {
        console.log(`      - ID: ${restaurant.id}, Nombre: ${restaurant.name || 'Sin nombre'}`);
      });
    }

    // 3. Verificar mesas
    console.log('\n3. VERIFICANDO MESAS:');
    const { data: tables, error: tablesError } = await supabase
      .from('tables')
      .select('id, table_number, restaurant_id, created_at');

    if (tablesError) {
      console.log('   ‚ùå Error al obtener mesas:', tablesError.message);
    } else {
      console.log(`   ‚úÖ Mesas encontradas: ${tables.length}`);
      if (tables.length > 0) {
        console.log('   üìã Detalle de mesas:');
        tables.forEach(table => {
          console.log(`      - Mesa ${table.table_number} (ID: ${table.id}) - Restaurante: ${table.restaurant_id}`);
        });
      }
    }

    // 4. Verificar categor√≠as de men√∫
    console.log('\n4. VERIFICANDO CATEGOR√çAS DE MEN√ö:');
    const { data: categories, error: categoriesError } = await supabase
      .from('menu_categories')
      .select('id, name, restaurant_id, is_available');

    if (categoriesError) {
      console.log('   ‚ùå Error al obtener categor√≠as:', categoriesError.message);
    } else {
      console.log(`   ‚úÖ Categor√≠as encontradas: ${categories.length}`);
      if (categories.length > 0) {
        console.log('   üìã Categor√≠as disponibles:');
        categories.forEach(category => {
          console.log(`      - ${category.name} (ID: ${category.id}) - Disponible: ${category.is_available ? 'S√≠' : 'No'}`);
        });
      }
    }

    // 5. Verificar elementos del men√∫
    console.log('\n5. VERIFICANDO ELEMENTOS DEL MEN√ö:');
    const { data: menuItems, error: menuItemsError } = await supabase
      .from('menu_items')
      .select('id, name, price, category_id, restaurant_id, is_available');

    if (menuItemsError) {
      console.log('   ‚ùå Error al obtener elementos del men√∫:', menuItemsError.message);
    } else {
      console.log(`   ‚úÖ Elementos del men√∫ encontrados: ${menuItems.length}`);
      if (menuItems.length > 0) {
        console.log('   üìã Primeros 5 elementos:');
        menuItems.slice(0, 5).forEach(item => {
          console.log(`      - ${item.name} - Bs. ${item.price || 0} - Disponible: ${item.is_available ? 'S√≠' : 'No'}`);
        });
      }
    }

    // 6. Generar URLs de ejemplo para los QR
    console.log('\n6. URLs DE C√ìDIGOS QR DE EJEMPLO:');
    if (tables && tables.length > 0) {
      const baseUrl = 'http://localhost:3000'; // Cambiar por tu URL de producci√≥n
      console.log('   üì± URLs que deber√≠an abrirse al escanear los QR:');
      tables.slice(0, 3).forEach(table => {
        const qrUrl = `${baseUrl}/menu/${table.id}`;
        console.log(`      Mesa ${table.table_number}: ${qrUrl}`);
      });
    }

    // 7. Verificar pol√≠ticas RLS
    console.log('\n7. VERIFICANDO POL√çTICAS RLS:');
    console.log('   ‚ÑπÔ∏è  Las pol√≠ticas RLS deben permitir acceso p√∫blico a:');
    console.log('      - tables (para obtener restaurant_id)');
    console.log('      - menu_categories (para mostrar categor√≠as)');
    console.log('      - menu_items (para mostrar productos)');

    // 8. Resumen y recomendaciones
    console.log('\n8. RESUMEN Y RECOMENDACIONES:');
    
    if (tables && tables.length > 0) {
      console.log('   ‚úÖ Tienes mesas configuradas');
      console.log('   ‚úÖ Los c√≥digos QR deber√≠an funcionar');
      
      if (menuItems && menuItems.length > 0) {
        console.log('   ‚úÖ Tienes elementos en el men√∫');
        console.log('   ‚úÖ Los clientes podr√°n ver productos al escanear');
      } else {
        console.log('   ‚ö†Ô∏è  No hay elementos en el men√∫');
        console.log('   üí° Agrega productos al men√∫ para que los clientes puedan ver algo');
      }
    } else {
      console.log('   ‚ùå No hay mesas configuradas');
      console.log('   üí° Ve al dashboard y genera c√≥digos QR para crear las mesas');
    }

    console.log('\n9. PR√ìXIMOS PASOS:');
    console.log('   1. Verifica que las pol√≠ticas RLS permitan acceso p√∫blico');
    console.log('   2. Prueba escanear un c√≥digo QR desde tu tel√©fono');
    console.log('   3. Verifica que la p√°gina /menu/[tableId] se abra correctamente');
    console.log('   4. Aseg√∫rate de que haya productos en el men√∫');

  } catch (error) {
    console.error('‚ùå Error durante el diagn√≥stico:', error);
  }
}

diagnosticQRStatus(); 